!function(e){var t={};function n(a){if(t[a])return t[a].exports;var i=t[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(a,i,function(t){return e[t]}.bind(null,i));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}([function(e,t,n){"use strict";function a(e){if(e){if(e instanceof HTMLElement)return e;if(Array.isArray(e.element)){for(let t=0;t<e.element.length;++t){let n=a(e.element[t]);if(n)return n}return null}return a(e.element)}return null}function i(e){return e?e instanceof HTMLElement?e:Array.isArray(e.element)?i(e.__parent):i(e.element):null}function l(e,t){if(e){if(!t&&e instanceof HTMLElement)return e;{let n=t?e.__nextSibling:e;for(;n;){let e=a(n);if(e)return e;n=n.__nextSibling}let i=e.__parent;for(;i&&Array.isArray(i.element);){let e=l(i.__nextSibling);if(e)return e;i=i.__parent}}}return null}function o(e,...t){t.forEach(t=>{t instanceof HTMLElement?i(e).append(t):Array.isArray(t.element)?t.element.forEach(t=>o(e,t)):t.element&&o(e,t.element)})}function r(e,t,n){t instanceof HTMLElement?i(e).insertBefore(t,l(n)):Array.isArray(t.element)?t.element.forEach(t=>r(e,t,n)):r(e,t.element,n)}function s(e){return e instanceof Function?e():e}function c(e){e.remove instanceof Function?e.remove():Array.isArray(e)?e.forEach(e=>c(e)):e.element&&c(e.element)}n.d(t,"m",(function(){return s})),n.d(t,"a",(function(){return u})),n.d(t,"k",(function(){return m})),n.d(t,"j",(function(){return f})),n.d(t,"h",(function(){return b})),n.d(t,"i",(function(){return g})),n.d(t,"b",(function(){return x})),n.d(t,"l",(function(){return w}));class u{constructor(e,t,n){this.context=t,this.awake(),this.children=n||this.component(t),Array.isArray(this.children)||(this.children=[this.children]);for(let e=0;e<this.children.length;++e){let n=this.children[e];Array.isArray(n)?(this.children.splice(e,1,...n),--e):n instanceof Function?(n=n(t),n?this.children[e]=new u(null,t,n):(this.children.splice(e,1),--e)):n instanceof u||(this.children.splice(e,1),--e)}if(e){e instanceof HTMLElement?(this.element=e,o(this.element,...this.children)):(this.element=document.createElement(e),o(this.element,...this.children)),this.__backedContext=[];let t=Object.keys(this.context);for(let e=0;e<t.length;++e){let n=t[e];n.startsWith("on")?this.element[n]=this.context[n]:n.startsWith("_")||void 0!==this.element[n]&&this.__backedContext.push(()=>{let e=s(this.context[n]);this.element[n]!==e&&(this.element[n]=e)})}this.__applyHtmlContext()}else this.element=this.children;for(let e=0;e<this.children.length;++e){let t=this.children[e];t instanceof u&&(t.__parent=this,t.__nextSibling=this.children[e+1])}}component(e){return[]}__reset(){this.children.forEach(e=>e.__reset()),Array.isArray(this.element)&&this.element.forEach(e=>e.__reset()),this.element instanceof u&&this.element.__reset(),this.__started=!1,this.awake(),this.__applyHtmlContext()}awake(){}__start(){return this.__started=!0,this.start()}start(){}__stop(){this.children.forEach(e=>e.__stop()),Array.isArray(this.element)&&this.element.forEach(e=>e.__stop()),this.stop(),this.__started=!1}stop(){}async update(){this.__started||await this.__start();try{this.__applyHtmlContext(),this.children.forEach(e=>function(e,t){e.update instanceof Function?e.update(t):e.element&&e.element.update instanceof Function&&e.element.update(t)}(e))}catch(e){throw e.componentStack||(e.componentStack=[]),e.componentStack.push(this),e}}__applyHtmlContext(){this.element instanceof HTMLElement&&this.__backedContext.forEach(e=>e())}remove(){this.__started&&this.__stop(),c(this.element)}}function d(e,t,...n){return new u(e,t,n)}class h{constructor(e){this.__pool=[],this.__component=e}push(e){e.__pool&&this.__pool.push(e)}pop(e){let t=this.__pool.pop();if(t)return t.__pool.__context=e,t.__reset(),t;{let n={__context:e};return e&&Object.keys(e).forEach(e=>{Object.defineProperty(n,e,{get:function(){return this.__context[e]},set:function(t){this.__context[e]=t}})}),t=new u(null,n,this.__component(n)),t.__pool=n,t.__remove=t.remove,t.remove=()=>{t.__remove(),this.push(t)},t}}}function p(e,t){return d("input",Object.assign(e,{type:t}))}function m(...e){return void 0!==e[0].items?b({data:()=>e[0].items.filter(e=>s(e.active)).slice(0,e[1]||1),component:e=>(e.createElement||e.component)()}):b({data:()=>e.filter(e=>s(e.active)).slice(0,1),component:e=>e.component()})}function f(...e){return m(...e.map(e=>({active:e.active,component:_(e.component)})))}let v=0;class y extends u{constructor(e){let t=[];super(null,e,t),e.component||(e.component=e.createElement),this.oldData=[],this.elements=t,this.dict={},this.__updateList()}__insertAt(e,t){this.__started&&(e<this.elements.length?r(this.__parent,t,this.elements[e]):r(this.__parent,t,l(this,!0)))}update(){this.__updateList(),super.update()}__updateList(){let e=s(this.context.data),t={},n={};for(let a=0;a<e.length;++a){let i=e[a],l=this.oldData[a],o=i instanceof Object;if(o&&i==l)continue;let r=o?i.__key||(i.__key=++v):i,s=this.dict[r];if(s){if(!o){let e=n[r];if(e&&e.length>=s.length){let e=new u(null,i,this.context.component(i));s.__parent=this,s.push(e),s=e;let t=n[r];t?t.push(s):n[r]=[s]}else{let e=s.shift();s.push(e),s=e;let t=n[r];if(t?t.push(s):n[r]=[s],i==l)continue}}let e=t[r];e&&(o?delete t[r]:e.splice(e.indexOf(s),1)),o&&(n[r]=s)}else if(s=new u(null,i,this.context.component(i)),s.__parent=this,o)this.dict[r]=s;else{let e=this.dict[r];e?e.push(s):this.dict[r]=[s];let t=n[r];t?t.push(s):n[r]=[s]}let c=this.elements[a],d=a+1;for(;d<this.elements.length;++d){let e=this.oldData[d];if(o){if(n[e.__key])continue;break}{let t=n[e];if(t){let e=this.elements[d];if(t.indexOf(e)>-1)continue}break}}if(this.__insertAt(d,s),d-1>0&&(this.elements[d-2].__nextSibling=s),c)if(o)n[l.__key]||(t[l.__key]=c);else{let e=n[l];if(!e||e.indexOf(c)<0){let e=t[l];e?e.push(c):t[l]=[c]}}this.elements[a]=s,this.oldData[a]=i}if(Object.keys(t).forEach(e=>{let n=t[e],a=this.dict[e];Array.isArray(n)?(n.forEach(e=>{c(e),a.splice(a.indexOf(element),1)}),0===a.length&&delete this.dict[e]):(c(n),delete this.dict[e])}),this.oldData.length>e.length){for(let t=e.length;t<this.oldData.length;++t){let e=this.elements[t],a=this.oldData[t],i=a instanceof Object,l=i?a.__key:a;if(!i||!n[a.__key]){{let t=n[a];if(t&&t.indexOf(e)>-1)continue}if(i)delete this.dict[l];else{let t=this.dict[l];t.splice(t.indexOf(e),1),0===t.length&&delete this.dict[l]}c(e)}}this.elements.splice(e.length,this.elements.length),this.oldData.splice(e.length,this.oldData.length),this.elements.length>0&&(this.elements[this.elements.length-1].__nextSibling=null)}}}function b(e){return new y(e)}function g(e){let t=new h(e.component);return b({data:e.data,component:e=>t.pop(e)})}function _(e){let t=new h(e);return()=>t.pop()}class x{constructor(e,t){this.__element=null,this.__mounted=!1,this.__siblingAppContexts=t||[],this.data=e;let n=e=>{Object.keys(e).forEach(t=>{if(t.startsWith("on")){let n=e[t];e[t]=async(...e)=>{let t=n(...e);for(;t instanceof Promise;)t=await t;return this.update(),t}}})};this.div=function(e,...t){return n(e),function(e,...t){return d("div",e,...t)}(e,...t)},this.span=function(e,...t){return n(e),function(e,...t){return d("span",e,...t)}(e,...t)},this.inputText=function(e){return n(e),function(e){return p(e,"text")}(e)},this.select=function(e){return n(e),function(e){let t=e.options;if(delete e.options,t instanceof Function){let e=t,n=[];t=()=>{let t=e();if(n===t)return n;for(let e=0;e<n.length;++e){let a=n[e];if(!t.includes(a)){let e=t.findIndex(e=>e.value===a.value&&e.text===a.text);e>-1&&(t[e]=a)}}}}return d("select",e,g({data:t,component:t=>d("option",{innerText:()=>t.text,value:()=>t.value,selected:()=>t.value===s(e.value)})}))}(e)},this.button=function(e){return n(e),function(e){return d("button",e)}(e)},this.p=function(e,...t){return n(e),function(e,...t){return d("p",e,...t)}(e,...t)},this.label=function(e,...t){return n(e),function(e,...t){return d("label",e,...t)}(e,...t)},this.a=function(e,...t){return n(e),function(e,...t){return d("a",e,...t)}(e,...t)},this.iframe=function(e,...t){return n(e),function(e,...t){let n=d("iframe",e),i=(n.update.bind(n.update),a(n)),l=setInterval(()=>{if(i.contentDocument){clearInterval(l);let a=d(i.contentDocument.body,e,...t);n.update=()=>{a.update()}}},30);return n}(e,...t)},this.mount=this.mount.bind(this),this.component=this.component.bind(this),this.update=this.update.bind(this),this.error=this.error.bind(this)}mount(e,...t){if(this.__mounted)throw new Error("context is already mounted");return this.__element=d(e,{},...t),this.__mounted=!0,this.update(),this.__element}component(e){if(!this.__mounted){let t=e.update;e.update=()=>{this.__mounted||(this.__mounted=!0),e.update=t,e.update()},this.__element=e}return e}update(){let e=Date.now();try{this.__element.update(),this.__siblingAppContexts.forEach(e=>{e.update()})}catch(e){this.error(e)}console.log("update time",Date.now()-e)}error(e){e.componentStack?console.error(e,e.componentStack):console.error(e)}}function w(e,t){return{...t||e,component:e.component,data:e}}},,function(e,t,n){var a=n(3),i=n(4);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var l={insert:"head",singleton:!1},o=(a(i,l),i.locals?i.locals:{});e.exports=o},function(e,t,n){"use strict";var a,i=function(){return void 0===a&&(a=Boolean(window&&document&&document.all&&!window.atob)),a},l=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function r(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},a=[],i=0;i<e.length;i++){var l=e[i],s=t.base?l[0]+t.base:l[0],c=n[s]||0,u="".concat(s," ").concat(c);n[s]=c+1;var d=r(u),h={css:l[1],media:l[2],sourceMap:l[3]};-1!==d?(o[d].references++,o[d].updater(h)):o.push({identifier:u,updater:v(h,t),references:1}),a.push(u)}return a}function c(e){var t=document.createElement("style"),a=e.attributes||{};if(void 0===a.nonce){var i=n.nc;i&&(a.nonce=i)}if(Object.keys(a).forEach((function(e){t.setAttribute(e,a[e])})),"function"==typeof e.insert)e.insert(t);else{var o=l(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var u,d=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function h(e,t,n,a){var i=n?"":a.media?"@media ".concat(a.media," {").concat(a.css,"}"):a.css;if(e.styleSheet)e.styleSheet.cssText=d(t,i);else{var l=document.createTextNode(i),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(l,o[t]):e.appendChild(l)}}function p(e,t,n){var a=n.css,i=n.media,l=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),l&&btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(l))))," */")),e.styleSheet)e.styleSheet.cssText=a;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(a))}}var m=null,f=0;function v(e,t){var n,a,i;if(t.singleton){var l=f++;n=m||(m=c(t)),a=h.bind(null,n,l,!1),i=h.bind(null,n,l,!0)}else n=c(t),a=p.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return a(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;a(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var a=0;a<n.length;a++){var i=r(n[a]);o[i].references--}for(var l=s(e,t),c=0;c<n.length;c++){var u=r(n[c]);0===o[u].references&&(o[u].updater(),o.splice(u,1))}n=l}}}},function(e,t,n){(t=n(5)(!1)).push([e.i,".editor{\n    position: fixed;\n    height: 100%;\n    width: 100%;\n}\n\n.editor-out{\n    position: absolute;\n    left: 80vw;\n    right: 0;\n    top: 0;\n    bottom: 80vh;\n\n    display: flex;\n    flex-flow: row-reverse;\n    background-color: yellow;\n}\n.editor-top{\n    position: absolute;\n    left: 0;\n    right: 20vw;\n    top: 0;\n    bottom: 80vh;\n\n    display: flex;\n\n    background-color: green;\n}\n.editor-side{\n    position: absolute;\n    left: 80vw;\n    right: 0;\n    top: 20vh;\n    bottom: 0;\n    background-color: yellow;\n    overflow-y: auto;\n}\n.editor-sandbox{\n    position: absolute;\n    left: 0;\n    right: 20vw;\n    top: 20vh;\n    bottom: 0;\n    background-color: lightgray;\n}\n\n.item-active{\n    box-shadow: 0 0 7px yellow;\n}",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",a=e[3];if(!a)return n;if(t&&"function"==typeof btoa){var i=(o=a,r=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),"/*# ".concat(s," */")),l=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[n].concat(l).concat([i]).join("\n")}var o,r,s;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,a){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(a)for(var l=0;l<this.length;l++){var o=this[l][0];null!=o&&(i[o]=!0)}for(var r=0;r<e.length;r++){var s=[].concat(e[r]);a&&i[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s))}},t}},function(e,t,n){"use strict";n.r(t);var a=n(0);n(2);function i(e,t=null){let{}=t||e;return function(t){let n=!0,a=!0,{appData:i,addAppData:l,setAppData:o,addAppDataReferer:r,removeAppDataReferer:s,renameAppData:c}=t;return e.component(div({className:"editor-side"},button({innerText:"appData",onclick:()=>{n=!n}}),button({innerText:"elementData",onclick:()=>{a=!a}}),switchComponent({items:[{active:()=>n,createElement:()=>body(list({data:()=>Object.keys(i),createElement:e=>div({},inputText({value:()=>e,placeholder:"name",onchange:t=>{c(e,t.target.value)}}),switchComponent({items:[{active:()=>"string"===i[e].type||"number"===i[e].type,createElement:()=>inputText({value:()=>"string"===i[e].type?i[e].stringValue:"number"===i[e].type?i[e].numberValue:null,placeholder:"value",onchange:t=>{o(e,t.target.value)}})},{active:()=>"list"===i[e].type,createElement:()=>body(list({data:()=>i[e].listValue,createElement:t=>inputText({value:()=>"string"===i[e].listType?t.stringValue:"number"===i[e].listType?t.numberValue:null,onchange:n=>{switch(i[e].listType){case"string":t.stringValue=n.target.value;break;case"number":t.numberValue=parseFloat(n.target.value)}}})}),select({options:["string","number"],value:()=>i[e].listType,onchange:t=>{i[e].listType=t.target.value}}),button({innerText:"add to list",onclick:()=>{i[e].listValue.push({stringValue:"",numberValue:0})}}))}]}),select({options:["string","number","list"],value:()=>i[e].type,onchange:t=>{i[e].type=t.target.value}}),switchComponent({items:[{active:()=>0===i[e].refCount,createElement:()=>button({innerText:"remove",onclick:()=>{delete i[e]}})},{active:()=>i[e].refCount>0,createElement:()=>label({innerText:()=>`in use for ${i[e].refCount} times`})}]}))}),button({innerText:"add field",onclick:()=>{l("","","string")}}))},{active:()=>t.activeItem&&a,createElement:()=>body(list({data:()=>Object.keys(t.activeItem.elData),createElement:e=>div({},label({innerText:e}),switchComponent({items:[{active:()=>"const"===t.activeItem.elData[e].bind,createElement:()=>inputText({value:()=>t.activeItem.elData[e].constValue,placeholder:"value",onchange:n=>{t.activeItem.elData[e].constValue=n.target.value}})},{active:()=>"dynamic"===t.activeItem.elData[e].bind,createElement:()=>body(inputText({value:()=>t.activeItem.elData[e].dynValue,placeholder:"field name",onchange:n=>{let a=t.activeItem.elData[e];i[a.dynValue]&&s(a.dynValue,a);let o=n.target.value;a.dynValue=o,i[o]?r(o,a):l(o,a.constValue,"string",a)}}),inputText({value:()=>getAppDataValue(t.activeItem.elData[e].dynValue),onchange:n=>{o(t.activeItem.elData[e].dynValue,n.target.value)}}))}]}),select({options:["const","dynamic"],value:()=>t.activeItem.elData[e].bind,onchange:n=>{let a=t.activeItem.elData[e];"dynamic"===a.bind&&a.dynValue&&s(a.dynValue,a),a.bind=n.target.value,"dynamic"===a.bind&&(i[a.dynValue]?r(a.dynValue,a):a.dynValue&&l(a.dynValue,a.constValue,"string",a))}}))}),list({data:()=>Object.keys(t.activeItem.events),createElement:e=>div({},label({innerText:e}),select({options:["none","setState","function"],value:()=>t.activeItem.events[e].type,onchange:n=>{t.activeItem.events[e].type=n.target.value}}),switchComponent({items:[{active:()=>"setState"===t.activeItem.events[e].type,createElement:()=>body(list({data:()=>Object.keys(t.activeItem.events[e].state),createElement:n=>div({},select({options:()=>Object.keys(i),value:()=>n,onchange:a=>{let i=t.activeItem.events[e].state[n];delete t.activeItem.events[e].state[n],t.activeItem.events[e].state[a.target.value]=i}}),inputText({value:()=>t.activeItem.events[e].state[n],placeholder:"new value",onchange:a=>{t.activeItem.events[e].state[n]=a.target.value}}))}),button({innerText:"add field",onclick:()=>{let n=0,a="new field";for(;void 0!==t.activeItem.events[e].state[a];)a+=++n;t.activeItem.events[e].state[a]=""}}))},{active:()=>"function"===t.activeItem.events[e].type,createElement:()=>body(inputText({placeholder:"function name",value:()=>t.activeItem.events[e].function,onchange:n=>{t.activeItem.events[e].function=n.target.value}}))}]}))}))}]},100)))}}let l=[],o=null,r={};class s{constructor(){}}class c extends a.b{constructor(...e){super(...e),this.data=new s}update(){Object.keys(r).forEach(e=>{O.context[e]=I(e)}),super.update()}}let u=new c,{mount:d,body:h,div:p,span:m,inputText:f,list:v,button:y,switchComponent:b,p:g,a:_,iframe:x,label:w,select:E}=u;function k(e,t,n,a){let i=r[e]={type:n,stringValue:"string"===n?t:0,numberValue:"number"===n?t:0,listType:"string",listValue:"list"===n?t:[],refs:[]};a&&i.refs.push(a)}function V(e,t){r[e].refs.push(t)}function T(e,t){let n=r[e];n.refs.splice(n.refs.indexOf(t),1)}function D(e,t){let n=r[e];switch(n.type){case"string":n.stringValue=t;break;case"number":n.numberValue=parseFloat(t);break;case"list":n.listValue=t}}function I(e){let t=r[e];if(!t)return null;switch(t.type){case"string":return t.stringValue;case"number":return t.numberValue;case"list":return t.listValue}}let O={element:null,context:{}},j=function(e,t){let{div:n}=Object(a.l)(e,t),l=new a.b(e.data.sandbox),o=new a.b(e.data,[l]),r=function(e,t=null){let{list:n}=t||e;return function(t){return e.component(n({data:t.items,component:e=>e.el(e.context)}))}}(l,e),s=function(e){let{component:t,body:n}=e;return function(e){return t(n())}}(o),c=function(e,t=null){let{button:n,div:a,span:i,list:l,a:o}=t||e;return function({pushItem:t,editorItemContext:r,defaultElContext:s}){return e.component(a({className:"editor-top"},n({innerText:"button",onclick:()=>t("button",e=>n(r(e)),s({innerText:"button"}))}),n({innerText:"div",onclick:()=>t("div",e=>a(r(e),l(e)),s({},!0))}),n({innerText:"list",onclick:()=>t("list",e=>i(r(e),l(e)),s({data:[]},!1,!0))}),n({innerText:"a",onclick:()=>t("a",e=>o(r(e)),s({innerText:"to google!",href:"https://www.google.com/"}))})))}}(e),u=i(e);return e.update,function(t){return e.component(n({className:"editor"},c(t),u(t),s(t),n({className:"editor-sandbox"},iframe({width:"100%",height:"100%"},r(t))),n({className:"editor-out"},button({innerText:"compile",onclick:()=>t.compile()}))))}}(new a.b);d(document.body,j({items:[],activeItem:null,appData:{},sandbox:{element:null,context:{}},editorItemContext:function(e){let t={};Object.keys(e.elData).forEach(n=>{t[n]=()=>{let t=e.elData[n];switch(t.bind){case"const":return t.constValue;case"dynamic":return O.context[t.dynValue]}}});let n={};return Object.keys(e.events).forEach(t=>{let a=e.events[t];n[t]=()=>{switch(a.type){case"setState":Object.assign(O.context,a.state);break;case"function":window[a.function]()}}}),{...e,...t,...n,style:()=>Object(a.m)(t.style)+(e===o?";box-shadow: 0 0 7px yellow;":null)+"min-width: 12px; min-height: 12px; border: dashed 1px gray",onclick:t=>{t.ctrlKey||(o!==e&&(t.stopPropagation(),t.preventDefault()),this.selectItem(e)),t.ctrlKey&&n.onclick&&n.onclick(t)}}},selectItem:function(e){this.activeItem!=e&&(this.activeItem=e)},defaultElContext:function(e,t,n){let a={},i=this.defaultElData(e);return Object.keys(i).forEach(e=>{a[e]={bind:"const",constValue:i[e],dynValue:"",type:Array.isArray(i[e])?"list":"string"}}),{allowChildren:!n&&t,dynamic:n,data:[],createElement:e=>e.el(e.context),elData:a,events:n?{}:this.defaultEvents()}},defaultElData:function(e){return{...e}},defaultEvents:()=>({onclick:{type:null,state:{},function:""}})})),d(document.body,p({className:"editor"},topComponent({pushItem:function(e,t,n){let a=l;o&&o.allowChildren?a=o.data:o=n;a.push({name:e,el:t,context:n})},defaultElContext:defaultElContext,editorItemContext:editorItemContext}),i(u)({activeItem:o}),p({className:"editor-side"},y({innerText:"appData",onclick:()=>{showAppData=!showAppData}}),y({innerText:"elementData",onclick:()=>{showElementData=!showElementData}}),b({items:[{active:()=>showAppData,createElement:()=>h(v({data:()=>Object.keys(r),createElement:e=>p({},f({value:()=>e,placeholder:"name",onchange:t=>{!function(e,t){let n=r[e];delete r[e],r[t]=n,n.refs.forEach(e=>e.dynValue=t)}(e,t.target.value)}}),b({items:[{active:()=>"string"===r[e].type||"number"===r[e].type,createElement:()=>f({value:()=>"string"===r[e].type?r[e].stringValue:"number"===r[e].type?r[e].numberValue:null,placeholder:"value",onchange:t=>{D(e,t.target.value)}})},{active:()=>"list"===r[e].type,createElement:()=>h(v({data:()=>r[e].listValue,createElement:t=>f({value:()=>"string"===r[e].listType?t.stringValue:"number"===r[e].listType?t.numberValue:null,onchange:n=>{switch(r[e].listType){case"string":t.stringValue=n.target.value;break;case"number":t.numberValue=parseFloat(n.target.value)}}})}),E({options:["string","number"],value:()=>r[e].listType,onchange:t=>{r[e].listType=t.target.value}}),y({innerText:"add to list",onclick:()=>{r[e].listValue.push({stringValue:"",numberValue:0})}}))}]}),E({options:["string","number","list"],value:()=>r[e].type,onchange:t=>{r[e].type=t.target.value}}),b({items:[{active:()=>0===r[e].refCount,createElement:()=>y({innerText:"remove",onclick:()=>{delete r[e]}})},{active:()=>r[e].refCount>0,createElement:()=>w({innerText:()=>`in use for ${r[e].refCount} times`})}]}))}),y({innerText:"add field",onclick:()=>{k("","","string")}}))},{active:()=>o&&showElementData,createElement:()=>h(v({data:()=>Object.keys(o.elData),createElement:e=>p({},w({innerText:e}),b({items:[{active:()=>"const"===o.elData[e].bind,createElement:()=>f({value:()=>o.elData[e].constValue,placeholder:"value",onchange:t=>{o.elData[e].constValue=t.target.value}})},{active:()=>"dynamic"===o.elData[e].bind,createElement:()=>h(f({value:()=>o.elData[e].dynValue,placeholder:"field name",onchange:t=>{let n=o.elData[e];r[n.dynValue]&&T(n.dynValue,n);let a=t.target.value;n.dynValue=a,r[a]?V(a,n):k(a,n.constValue,"string",n)}}),f({value:()=>I(o.elData[e].dynValue),onchange:t=>{D(o.elData[e].dynValue,t.target.value)}}))}]}),E({options:["const","dynamic"],value:()=>o.elData[e].bind,onchange:t=>{let n=o.elData[e];"dynamic"===n.bind&&n.dynValue&&T(n.dynValue,n),n.bind=t.target.value,"dynamic"===n.bind&&(r[n.dynValue]?V(n.dynValue,n):n.dynValue&&k(n.dynValue,n.constValue,"string",n))}}))}),v({data:()=>Object.keys(o.events),createElement:e=>p({},w({innerText:e}),E({options:["none","setState","function"],value:()=>o.events[e].type,onchange:t=>{o.events[e].type=t.target.value}}),b({items:[{active:()=>"setState"===o.events[e].type,createElement:()=>h(v({data:()=>Object.keys(o.events[e].state),createElement:t=>p({},E({options:()=>Object.keys(r),value:()=>t,onchange:n=>{let a=o.events[e].state[t];delete o.events[e].state[t],o.events[e].state[n.target.value]=a}}),f({value:()=>o.events[e].state[t],placeholder:"new value",onchange:n=>{o.events[e].state[t]=n.target.value}}))}),y({innerText:"add field",onclick:()=>{let t=0,n="new field";for(;void 0!==o.events[e].state[n];)n+=++t;o.events[e].state[n]=""}}))},{active:()=>"function"===o.events[e].type,createElement:()=>h(f({placeholder:"function name",value:()=>o.events[e].function,onchange:t=>{o.events[e].function=t.target.value}}))}]}))}))}]},100)),p({className:"editor-sandbox"},x({width:"100%",height:"100%"},sandboxComponent({items:l}))),p({className:"editor-out"},y({innerText:"compile",onclick:()=>{console.log(`\n        let context = {\n            ${Object.keys(r).map(e=>`"${e}":"${r[e]}"`).join(",")}\n        };\n\n        let app = component(document.body, {},\n            ${l.map(e=>function e(t){let n={};return Object.keys(t.context.elData).forEach(e=>{n[e]=t.context.elData[e].toString()}),`${t.name}(${JSON.stringify(n)}, ${void 0!==t.context.data?t.context.data.map(t=>e(t)):""})`}(e))}\n            );\n\n        app.update();\n    `)}}))))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,