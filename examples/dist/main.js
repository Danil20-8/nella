!function(t){var e={};function n(i){if(e[i])return e[i].exports;var s=e[i]={i:i,l:!1,exports:{}};return t[i].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)n.d(i,s,function(e){return t[e]}.bind(null,s));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){"use strict";function i(t){if(t){if(t instanceof HTMLElement)return t;if(Array.isArray(t.element)){for(let e=0;e<t.element.length;++e){let n=i(t.element[e]);if(n)return n}return null}return i(t.element)}return null}function s(t){return t?t instanceof HTMLElement?t:Array.isArray(t.element)?s(t.__parent):s(t.element):null}function o(t,e){if(t){if(!e&&t instanceof HTMLElement)return t;{let n=e?t.__nextSibling:t;for(;n;){let t=i(n);if(t)return t;n=n.__nextSibling}let s=t.__parent;for(;s&&Array.isArray(s.element);){let t=o(s.__nextSibling);if(t)return t;s=s.__parent}}}return null}function r(t,...e){e.forEach(e=>{e instanceof HTMLElement?s(t).append(e):Array.isArray(e.element)?e.element.forEach(e=>r(t,e)):e.element&&r(t,e.element)})}function c(t,e,n){e instanceof HTMLElement?s(t).insertBefore(e,o(n)):Array.isArray(e.element)?e.element.forEach(e=>c(t,e,n)):c(t,e.element,n)}function l(t){return t instanceof Function?t():t}function a(t){t.remove instanceof Function?t.remove():Array.isArray(t)?t.forEach(t=>a(t)):t.element&&a(t.element)}n.d(e,"m",(function(){return l})),n.d(e,"a",(function(){return h})),n.d(e,"k",(function(){return m})),n.d(e,"j",(function(){return f})),n.d(e,"h",(function(){return x})),n.d(e,"i",(function(){return O})),n.d(e,"b",(function(){return v})),n.d(e,"l",(function(){return g}));class h{constructor(t,e,n){this.context=e,this.awake(),this.children=n||this.component(e),Array.isArray(this.children)||(this.children=[this.children]);for(let t=0;t<this.children.length;++t){let n=this.children[t];Array.isArray(n)?(this.children.splice(t,1,...n),--t):n instanceof Function?(n=n(e),n?this.children[t]=new h(null,e,n):(this.children.splice(t,1),--t)):n instanceof h||(this.children.splice(t,1),--t)}if(t){t instanceof HTMLElement?(this.element=t,r(this.element,...this.children)):(this.element=document.createElement(t),r(this.element,...this.children)),this.__backedContext=[];let e=Object.keys(this.context);for(let t=0;t<e.length;++t){let n=e[t];n.startsWith("on")?this.element[n]=this.context[n]:n.startsWith("_")||void 0!==this.element[n]&&this.__backedContext.push(()=>{let t=l(this.context[n]);this.element[n]!==t&&(this.element[n]=t)})}this.__applyHtmlContext()}else this.element=this.children;for(let t=0;t<this.children.length;++t){let e=this.children[t];e instanceof h&&(e.__parent=this,e.__nextSibling=this.children[t+1])}}component(t){return[]}__reset(){this.children.forEach(t=>t.__reset()),Array.isArray(this.element)&&this.element.forEach(t=>t.__reset()),this.element instanceof h&&this.element.__reset(),this.__started=!1,this.awake(),this.__applyHtmlContext()}awake(){}__start(){return this.__started=!0,this.start()}start(){}__stop(){this.children.forEach(t=>t.__stop()),Array.isArray(this.element)&&this.element.forEach(t=>t.__stop()),this.stop(),this.__started=!1}stop(){}async update(){this.__started||await this.__start();try{this.__applyHtmlContext(),this.children.forEach(t=>function(t,e){t.update instanceof Function?t.update(e):t.element&&t.element.update instanceof Function&&t.element.update(e)}(t))}catch(t){throw t.componentStack||(t.componentStack=[]),t.componentStack.push(this),t}}__applyHtmlContext(){this.element instanceof HTMLElement&&this.__backedContext.forEach(t=>t())}remove(){this.__started&&this.__stop(),a(this.element)}}function u(t,e,...n){return new h(t,e,n)}class d{constructor(t){this.__pool=[],this.__component=t}push(t){t.__pool&&this.__pool.push(t)}pop(t){let e=this.__pool.pop();if(e)return e.__pool.__context=t,e.__reset(),e;{let n={__context:t};return t&&Object.keys(t).forEach(t=>{Object.defineProperty(n,t,{get:function(){return this.__context[t]},set:function(e){this.__context[t]=e}})}),e=new h(null,n,this.__component(n)),e.__pool=n,e.__remove=e.remove,e.remove=()=>{e.__remove(),this.push(e)},e}}}function p(t,e){return u("input",Object.assign(t,{type:e}))}function m(...t){return void 0!==t[0].items?x({data:()=>t[0].items.filter(t=>l(t.active)).slice(0,t[1]||1),component:t=>(t.createElement||t.component)()}):x({data:()=>t.filter(t=>l(t.active)).slice(0,1),component:t=>t.component()})}function f(...t){return m(...t.map(t=>({active:t.active,component:y(t.component)})))}let _=0;class b extends h{constructor(t){let e=[];super(null,t,e),t.component||(t.component=t.createElement),this.oldData=[],this.elements=e,this.dict={},this.__updateList()}__insertAt(t,e){this.__started&&(t<this.elements.length?c(this.__parent,e,this.elements[t]):c(this.__parent,e,o(this,!0)))}update(){this.__updateList(),super.update()}__updateList(){let t=l(this.context.data),e={},n={};for(let i=0;i<t.length;++i){let s=t[i],o=this.oldData[i],r=s instanceof Object;if(r&&s==o)continue;let c=r?s.__key||(s.__key=++_):s,l=this.dict[c];if(l){if(!r){let t=n[c];if(t&&t.length>=l.length){let t=new h(null,s,this.context.component(s));l.__parent=this,l.push(t),l=t;let e=n[c];e?e.push(l):n[c]=[l]}else{let t=l.shift();l.push(t),l=t;let e=n[c];if(e?e.push(l):n[c]=[l],s==o)continue}}let t=e[c];t&&(r?delete e[c]:t.splice(t.indexOf(l),1)),r&&(n[c]=l)}else if(l=new h(null,s,this.context.component(s)),l.__parent=this,r)this.dict[c]=l;else{let t=this.dict[c];t?t.push(l):this.dict[c]=[l];let e=n[c];e?e.push(l):n[c]=[l]}let a=this.elements[i],u=i+1;for(;u<this.elements.length;++u){let t=this.oldData[u];if(r){if(n[t.__key])continue;break}{let e=n[t];if(e){let t=this.elements[u];if(e.indexOf(t)>-1)continue}break}}if(this.__insertAt(u,l),u-1>0&&(this.elements[u-2].__nextSibling=l),a)if(r)n[o.__key]||(e[o.__key]=a);else{let t=n[o];if(!t||t.indexOf(a)<0){let t=e[o];t?t.push(a):e[o]=[a]}}this.elements[i]=l,this.oldData[i]=s}if(Object.keys(e).forEach(t=>{let n=e[t],i=this.dict[t];Array.isArray(n)?(n.forEach(t=>{a(t),i.splice(i.indexOf(element),1)}),0===i.length&&delete this.dict[t]):(a(n),delete this.dict[t])}),this.oldData.length>t.length){for(let e=t.length;e<this.oldData.length;++e){let t=this.elements[e],i=this.oldData[e],s=i instanceof Object,o=s?i.__key:i;if(!s||!n[i.__key]){{let e=n[i];if(e&&e.indexOf(t)>-1)continue}if(s)delete this.dict[o];else{let e=this.dict[o];e.splice(e.indexOf(t),1),0===e.length&&delete this.dict[o]}a(t)}}this.elements.splice(t.length,this.elements.length),this.oldData.splice(t.length,this.oldData.length),this.elements.length>0&&(this.elements[this.elements.length-1].__nextSibling=null)}}}function x(t){return new b(t)}function O(t){let e=new d(t.component);return x({data:t.data,component:t=>e.pop(t)})}function y(t){let e=new d(t);return()=>e.pop()}class v{constructor(t,e){this.__element=null,this.__mounted=!1,this.__siblingAppContexts=e||[],this.data=t;let n=t=>{Object.keys(t).forEach(e=>{if(e.startsWith("on")){let n=t[e];t[e]=async(...t)=>{let e=n(...t);for(;e instanceof Promise;)e=await e;return this.update(),e}}})};this.div=function(t,...e){return n(t),function(t,...e){return u("div",t,...e)}(t,...e)},this.span=function(t,...e){return n(t),function(t,...e){return u("span",t,...e)}(t,...e)},this.inputText=function(t){return n(t),function(t){return p(t,"text")}(t)},this.select=function(t){return n(t),function(t){let e=t.options;if(delete t.options,e instanceof Function){let t=e,n=[];e=()=>{let e=t();if(n===e)return n;for(let t=0;t<n.length;++t){let i=n[t];if(!e.includes(i)){let t=e.findIndex(t=>t.value===i.value&&t.text===i.text);t>-1&&(e[t]=i)}}}}return u("select",t,O({data:e,component:e=>u("option",{innerText:()=>e.text,value:()=>e.value,selected:()=>e.value===l(t.value)})}))}(t)},this.button=function(t){return n(t),function(t){return u("button",t)}(t)},this.p=function(t,...e){return n(t),function(t,...e){return u("p",t,...e)}(t,...e)},this.label=function(t,...e){return n(t),function(t,...e){return u("label",t,...e)}(t,...e)},this.a=function(t,...e){return n(t),function(t,...e){return u("a",t,...e)}(t,...e)},this.iframe=function(t,...e){return n(t),function(t,...e){let n=u("iframe",t),s=(n.update.bind(n.update),i(n)),o=setInterval(()=>{if(s.contentDocument){clearInterval(o);let i=u(s.contentDocument.body,t,...e);n.update=()=>{i.update()}}},30);return n}(t,...e)},this.mount=this.mount.bind(this),this.component=this.component.bind(this),this.update=this.update.bind(this),this.error=this.error.bind(this)}mount(t,...e){if(this.__mounted)throw new Error("context is already mounted");return this.__element=u(t,{},...e),this.__mounted=!0,this.update(),this.__element}component(t){if(!this.__mounted){let e=t.update;t.update=()=>{this.__mounted||(this.__mounted=!0),t.update=e,t.update()},this.__element=t}return t}update(){let t=Date.now();try{this.__element.update(),this.__siblingAppContexts.forEach(t=>{t.update()})}catch(t){this.error(t)}console.log("update time",Date.now()-t)}error(t){t.componentStack?console.error(t,t.componentStack):console.error(t)}}function g(t,e){return{...e||t,component:t.component,data:t}}},function(t,e,n){"use strict";n.r(e);var i=n(0);class s extends i.a{constructor(t){super(null,t,[]),this.element=Object(i.div)({},Object(i.inputText)({value:this.context.value,onkeyup:t=>this.context.onchange(t),onchange:t=>this.context.onchange(t),onfocus:()=>{this.focus=!0,this.update()},onblur:()=>{this.focus=!1,this.update()}}),Object(i.div)({style:()=>`${this.focus?"":"display: none;"}`},Object(i.h)({data:()=>Object(i.m)(this.context.suggestions).filter(t=>t.startsWith(Object(i.m)(this.context.value))),createElement:t=>Object(i.div)({innerText:t,setState:function(t){this.innerText=t}})})))}update(){this.element.update()}}class o{constructor(t){this.context=t,this.element=Object(i.body)(function(t){return new s(t)}({value:()=>this.searchValue||"",onchange:t=>{this.searchValue=t.target.value,this.update()},suggestions:["wall","stay","love","feel","be","do"]}),Object(i.div)({},Object(i.h)({data:["item 1","item 2"],createElement:t=>Object(i.div)({innerText:t})},Object(i.div)({}))))}update(){this.element.update()}}class r{constructor(){this.items=["1","2","3"],this.buttonClicked=!1,this.count=0,this.tags="",this.leftright=[{value:1,side:!1},{value:2,side:!1},{value:3,side:!1},{value:4,side:!0}]}}new class{constructor(t){this.parent=t,this.context=new r,this.element=Object(i.component)(t,{style:"color: blue;"},Object(i.body)(Object(i.div)({style:"position: relative;"},Object(i.component)("h1",{innerText:()=>"No no no"}),Object(i.inputText)({value:()=>this.context.tags,onchange:t=>{this.context.tags=t.target.value,this.update()},onkeyup:t=>{this.context.tags=t.target.value,this.update()}}),Object(i.h)({data:()=>this.context.tags.split(" ").filter(t=>t),createElement:t=>Object(i.div)({style:`color: ${t};`,innerText:t+" "})})),Object(i.div)({innerHTML:"<strong>AAA</strong>aaa!"}),(()=>{let t={items1:["List 1","Item 1","Item 2"],items2:["List 2","Item 1","Item 2"],items3:["List 3","Item 1","Item 2"]};return Object(i.body)(Object(i.button)({innerText:"Add to list 1",onclick:()=>{t.items1.push(0===t.items1.length?"List 1":`Item ${t.items1.length}`),this.update()}}),Object(i.button)({innerText:"Add to list 2",onclick:()=>{t.items2.push(0===t.items2.length?"List 2":`Item ${t.items2.length}`),this.update()}}),Object(i.button)({innerText:"Add to list 3",onclick:()=>{t.items3.push(0===t.items3.length?"List 3":`Item ${t.items3.length}`),this.update()}}),Object(i.h)({data:()=>t.items1,createElement:e=>Object(i.body)(Object(i.div)({innerText:e}),Object(i.button)({innerText:`remove ${e}`,onclick:()=>{t.items1.splice(t.items1.indexOf(e),1),this.update()}}))}),Object(i.h)({data:()=>t.items2,createElement:e=>Object(i.body)(Object(i.div)({innerText:e}),Object(i.button)({innerText:`remove ${e}`,onclick:()=>{t.items2.splice(t.items2.indexOf(e),1),this.update()}}))}),Object(i.h)({data:()=>t.items3,createElement:e=>Object(i.body)(Object(i.div)({innerText:e}),Object(i.button)({innerText:`remove ${e}`,onclick:()=>{t.items3.splice(t.items3.indexOf(e),1),this.update()}}))}))})(),Object(i.div)({id:1},Object(i.h)({data:()=>this.context.items,createElement:t=>Object(i.div)({innerText:t,setState:function(t){this.innerText=t}})})),Object(i.button)({className:()=>`clickable ${this.context.buttonClicked?"clicked":null}`,innerText:()=>this.context.buttonClicked?"Click again!":"Click me!",onclick:t=>{this.context.buttonClicked=!0,Math.random()>.5?this.context.items.splice(0,1):this.context.items.splice(Math.round(Math.random()*(this.context.items.length-1)),0,Math.round(30*Math.random())),this.context.count+=1,this.update()}}),Object(i.div)({innerText:()=>this.context.count}),Object(i.div)({},Object(i.inputText)({placeholder:"enter something"}),Object(i.button)({innerText:"add",onclick:t=>{this.context.leftright.push({value:t.target.parentElement.querySelector("input").value,side:!1}),this.update()}})),Object(i.div)({style:"display: flex;"},Object(i.div)({style:"width: 300px;"},Object(i.component)("h3",{innerText:"left side"}),Object(i.h)({data:()=>this.context.leftright.filter(t=>t.side),createElement:t=>Object(i.body)(Object(i.div)({innerText:()=>t.value}),Object(i.inputText)({placeholder:"rename",onkeydown:e=>{13===e.keyCode&&(t.value=e.target.value,this.update())}}),Object(i.button)({innerText:"to the right",onclick:()=>{t.side=!t.side,this.update()}}))})),Object(i.div)({style:"width: 300px;"},Object(i.component)("h3",{innerText:"right side"}),Object(i.h)({data:()=>this.context.leftright.filter(t=>!t.side),createElement:t=>Object(i.body)(Object(i.div)({innerText:t.value}),Object(i.button)({innerText:"to the left",onclick:()=>{t.side=!t.side,this.update()}}))})),Object(i.button)({innerText:"resort",onclick:()=>{this.context.leftright=this.context.leftright.reverse(),this.update()}})),Object(i.div)({style:"border: solid 1px red"},Object(i.k)({items:[{active:()=>this.context.count%2==0,createElement:()=>new o({})},{active:()=>this.context.count%2==1,createElement:()=>function(t){let e=Object(i.body)(Object(i.div)({style:"background: red; width: 10px; height: 10px;"}),select({style:"width: 200px;",value:3,options:[1,2,3,4,5],onchange:t=>update(e)}));return e}()}]}))))}update(){this.element.update()}}(document.body).update()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,