!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=7)}({0:function(t,e,n){"use strict";function i(t){if(t){if(t instanceof HTMLElement)return t;if(Array.isArray(t.element)){for(let e=0;e<t.element.length;++e){let n=i(t.element[e]);if(n)return n}return null}return i(t.element)}return null}function r(t){return t?t instanceof HTMLElement?t:Array.isArray(t.element)?r(t.__parent):r(t.element):null}function o(t,e){if(t){if(!e&&t instanceof HTMLElement)return t;{let n=e?t.__nextSibling:t;for(;n;){let t=i(n);if(t)return t;n=n.__nextSibling}let r=t.__parent;for(;r&&Array.isArray(r.element);){let t=o(r.__nextSibling);if(t)return t;r=r.__parent}}}return null}function s(t,...e){e.forEach(e=>{e instanceof HTMLElement?r(t).append(e):Array.isArray(e.element)?e.element.forEach(e=>s(t,e)):e.element&&s(t,e.element)})}function l(t,e,n){e instanceof HTMLElement?r(t).insertBefore(e,o(n)):Array.isArray(e.element)?e.element.forEach(e=>l(t,e,n)):l(t,e.element,n)}function c(t){return t instanceof Function?t():t}function a(t){t.remove instanceof Function?t.remove():Array.isArray(t)?t.forEach(t=>a(t)):t.element&&a(t.element)}n.d(e,"m",(function(){return c})),n.d(e,"a",(function(){return h})),n.d(e,"k",(function(){return f})),n.d(e,"j",(function(){return m})),n.d(e,"h",(function(){return y})),n.d(e,"i",(function(){return b})),n.d(e,"b",(function(){return v})),n.d(e,"l",(function(){return w}));class h{constructor(t,e,n){this.context=e,this.awake(),this.children=n||this.component(e),Array.isArray(this.children)||(this.children=[this.children]);for(let t=0;t<this.children.length;++t){let n=this.children[t];Array.isArray(n)?(this.children.splice(t,1,...n),--t):n instanceof Function?(n=n(e),n?this.children[t]=new h(null,e,n):(this.children.splice(t,1),--t)):n instanceof h||(this.children.splice(t,1),--t)}if(t){t instanceof HTMLElement?(this.element=t,s(this.element,...this.children)):(this.element=document.createElement(t),s(this.element,...this.children)),this.__backedContext=[];let e=Object.keys(this.context);for(let t=0;t<e.length;++t){let n=e[t];n.startsWith("on")?this.element[n]=this.context[n]:n.startsWith("_")||void 0!==this.element[n]&&this.__backedContext.push(()=>{let t=c(this.context[n]);this.element[n]!==t&&(this.element[n]=t)})}this.__applyHtmlContext()}else this.element=this.children;for(let t=0;t<this.children.length;++t){let e=this.children[t];e instanceof h&&(e.__parent=this,e.__nextSibling=this.children[t+1])}}component(t){return[]}__reset(){this.children.forEach(t=>t.__reset()),Array.isArray(this.element)&&this.element.forEach(t=>t.__reset()),this.element instanceof h&&this.element.__reset(),this.__started=!1,this.awake(),this.__applyHtmlContext()}awake(){}__start(){return this.__started=!0,this.start()}start(){}__stop(){this.children.forEach(t=>t.__stop()),Array.isArray(this.element)&&this.element.forEach(t=>t.__stop()),this.stop(),this.__started=!1}stop(){}async update(){this.__started||await this.__start();try{this.__applyHtmlContext(),this.children.forEach(t=>function(t,e){t.update instanceof Function?t.update(e):t.element&&t.element.update instanceof Function&&t.element.update(e)}(t))}catch(t){throw t.componentStack||(t.componentStack=[]),t.componentStack.push(this),t}}__applyHtmlContext(){this.element instanceof HTMLElement&&this.__backedContext.forEach(t=>t())}remove(){this.__started&&this.__stop(),a(this.element)}}function u(t,e,...n){return new h(t,e,n)}class d{constructor(t){this.__pool=[],this.__component=t}push(t){t.__pool&&this.__pool.push(t)}pop(t){let e=this.__pool.pop();if(e)return e.__pool.__context=t,e.__reset(),e;{let n={__context:t};return t&&Object.keys(t).forEach(t=>{Object.defineProperty(n,t,{get:function(){return this.__context[t]},set:function(e){this.__context[t]=e}})}),e=new h(null,n,this.__component(n)),e.__pool=n,e.__remove=e.remove,e.remove=()=>{e.__remove(),this.push(e)},e}}}function p(t,e){return u("input",Object.assign(t,{type:e}))}function f(...t){return void 0!==t[0].items?y({data:()=>t[0].items.filter(t=>c(t.active)).slice(0,t[1]||1),component:t=>(t.createElement||t.component)()}):y({data:()=>t.filter(t=>c(t.active)).slice(0,1),component:t=>t.component()})}function m(...t){return f(...t.map(t=>({active:t.active,component:g(t.component)})))}let _=0;class x extends h{constructor(t){let e=[];super(null,t,e),t.component||(t.component=t.createElement),this.oldData=[],this.elements=e,this.dict={},this.__updateList()}__insertAt(t,e){this.__started&&(t<this.elements.length?l(this.__parent,e,this.elements[t]):l(this.__parent,e,o(this,!0)))}update(){this.__updateList(),super.update()}__updateList(){let t=c(this.context.data),e={},n={};for(let i=0;i<t.length;++i){let r=t[i],o=this.oldData[i],s=r instanceof Object;if(s&&r==o)continue;let l=s?r.__key||(r.__key=++_):r,c=this.dict[l];if(c){if(!s){let t=n[l];if(t&&t.length>=c.length){let t=new h(null,r,this.context.component(r));c.__parent=this,c.push(t),c=t;let e=n[l];e?e.push(c):n[l]=[c]}else{let t=c.shift();c.push(t),c=t;let e=n[l];if(e?e.push(c):n[l]=[c],r==o)continue}}let t=e[l];t&&(s?delete e[l]:t.splice(t.indexOf(c),1)),s&&(n[l]=c)}else if(c=new h(null,r,this.context.component(r)),c.__parent=this,s)this.dict[l]=c;else{let t=this.dict[l];t?t.push(c):this.dict[l]=[c];let e=n[l];e?e.push(c):n[l]=[c]}let a=this.elements[i],u=i+1;for(;u<this.elements.length;++u){let t=this.oldData[u];if(s){if(n[t.__key])continue;break}{let e=n[t];if(e){let t=this.elements[u];if(e.indexOf(t)>-1)continue}break}}if(this.__insertAt(u,c),u-1>0&&(this.elements[u-2].__nextSibling=c),a)if(s)n[o.__key]||(e[o.__key]=a);else{let t=n[o];if(!t||t.indexOf(a)<0){let t=e[o];t?t.push(a):e[o]=[a]}}this.elements[i]=c,this.oldData[i]=r}if(Object.keys(e).forEach(t=>{let n=e[t],i=this.dict[t];Array.isArray(n)?(n.forEach(t=>{a(t),i.splice(i.indexOf(element),1)}),0===i.length&&delete this.dict[t]):(a(n),delete this.dict[t])}),this.oldData.length>t.length){for(let e=t.length;e<this.oldData.length;++e){let t=this.elements[e],i=this.oldData[e],r=i instanceof Object,o=r?i.__key:i;if(!r||!n[i.__key]){{let e=n[i];if(e&&e.indexOf(t)>-1)continue}if(r)delete this.dict[o];else{let e=this.dict[o];e.splice(e.indexOf(t),1),0===e.length&&delete this.dict[o]}a(t)}}this.elements.splice(t.length,this.elements.length),this.oldData.splice(t.length,this.oldData.length),this.elements.length>0&&(this.elements[this.elements.length-1].__nextSibling=null)}}}function y(t){return new x(t)}function b(t){let e=new d(t.component);return y({data:t.data,component:t=>e.pop(t)})}function g(t){let e=new d(t);return()=>e.pop()}class v{constructor(t,e){this.__element=null,this.__mounted=!1,this.__siblingAppContexts=e||[],this.data=t;let n=t=>{Object.keys(t).forEach(e=>{if(e.startsWith("on")){let n=t[e];t[e]=async(...t)=>{let e=n(...t);for(;e instanceof Promise;)e=await e;return this.update(),e}}})};this.div=function(t,...e){return n(t),function(t,...e){return u("div",t,...e)}(t,...e)},this.span=function(t,...e){return n(t),function(t,...e){return u("span",t,...e)}(t,...e)},this.inputText=function(t){return n(t),function(t){return p(t,"text")}(t)},this.select=function(t){return n(t),function(t){let e=t.options;if(delete t.options,e instanceof Function){let t=e,n=[];e=()=>{let e=t();if(n===e)return n;for(let t=0;t<n.length;++t){let i=n[t];if(!e.includes(i)){let t=e.findIndex(t=>t.value===i.value&&t.text===i.text);t>-1&&(e[t]=i)}}}}return u("select",t,b({data:e,component:e=>u("option",{innerText:()=>e.text,value:()=>e.value,selected:()=>e.value===c(t.value)})}))}(t)},this.button=function(t){return n(t),function(t){return u("button",t)}(t)},this.p=function(t,...e){return n(t),function(t,...e){return u("p",t,...e)}(t,...e)},this.label=function(t,...e){return n(t),function(t,...e){return u("label",t,...e)}(t,...e)},this.a=function(t,...e){return n(t),function(t,...e){return u("a",t,...e)}(t,...e)},this.iframe=function(t,...e){return n(t),function(t,...e){let n=u("iframe",t),r=(n.update.bind(n.update),i(n)),o=setInterval(()=>{if(r.contentDocument){clearInterval(o);let i=u(r.contentDocument.body,t,...e);n.update=()=>{i.update()}}},30);return n}(t,...e)},this.mount=this.mount.bind(this),this.component=this.component.bind(this),this.update=this.update.bind(this),this.error=this.error.bind(this)}mount(t,...e){if(this.__mounted)throw new Error("context is already mounted");return this.__element=u(t,{},...e),this.__mounted=!0,this.update(),this.__element}component(t){if(!this.__mounted){let e=t.update;t.update=()=>{this.__mounted||(this.__mounted=!0),t.update=e,t.update()},this.__element=t}return t}update(){let t=Date.now();try{this.__element.update(),this.__siblingAppContexts.forEach(t=>{t.update()})}catch(t){this.error(t)}console.log("update time",Date.now()-t)}error(t){t.componentStack?console.error(t,t.componentStack):console.error(t)}}function w(t,e){return{...e||t,component:t.component,data:t}}},7:function(t,e,n){"use strict";n.r(e);var i=n(0);let r=new i.b,{mount:o,div:s,button:l,select:c,span:a,inputText:h}=r,u={show:!1,listData:[]},d=function(t,e){let{component:n,div:r,span:o,button:s}=Object(i.l)(t,e);class l extends i.a{constructor(t){super(null,t)}component(){return[o({innerText:()=>this.context.title+" "}),o({innerText:()=>this.startTime&&((this.stopTime||Date.now())-this.startTime)/1e3}),Object(i.k)({active:()=>!this.started,component:()=>s({innerText:"start",onclick:()=>{this.started=!0,this.startTime=Date.now(),this.stopTime=0,this.interval=setInterval(()=>{this.update()},30)}})},{active:()=>this.started,component:()=>s({innerText:"stop",onclick:()=>{this.started=!1,clearInterval(this.interval),this.interval=null,this.stopTime=Date.now()}})})]}awake(){this.started=!1,this.interval=null,this.startTime=0,this.stopTime=0}stop(){clearInterval(this.interval)}}return t=>n(new l(t))}(r),p=function(t,e){let{component:n,div:r,button:o}=Object(i.l)(t,e);return function(t){return n(r({},Object(i.k)({active:()=>!Object(i.m)(t.signedIn),component:()=>t.authComponent(t)},{active:()=>Object(i.m)(t.signedIn),component:()=>r({},o({innerText:"signed in!"}))})))}}(r),f=function(t,e){let{component:n,div:r,span:o}=Object(i.l)(t,e);class s extends i.a{constructor(t){super(null,t)}component(){return r({style:()=>this.loaded?"border: solid 2px green; padding: 12px; color: green;":"border: solid 2px red; padding: 12px; color: red"},o({innerText:()=>this.loaded?"Ready to work!":"Loading..."}),r({innerText:()=>this.loaded?"Me too!":"Waiting too..."}),r({},Object(i.h)({data:["1","2","3"],component:t=>r({innerText:()=>t})})))}awake(){this.loaded=!1}async start(){await new Promise(t=>{setTimeout(t,3e3)}),this.loaded=!0}}return t=>n(new s(t))}(r),m=Date.now();o(document.body,p({signedIn:!1,authComponent:function(t){let{div:e,button:n,inputText:i}=t;return function(t){return e({},i({placeholder:"login"}),n({innerText:"sign in",onclick:()=>{t.signedIn=!0}}))}}(r)}),d({title:"static timer"}),f({}),()=>{let t=[];return[()=>{let e="",n="",r=null;return s({style:"display: flex; flex-flow: row wrap; width: 480px"},s({style:"display: flex; flex-flow: column wrap; width: 320px"},r=h({placeholer:"title",style:()=>n?"color: red; border-color: red;":"",value:()=>e,onkeyup:t=>{e=t.target.value,n=""}}),Object(i.k)({active:()=>n,component:()=>a({style:"color: red;",innerText:()=>n})})),l({innerText:"add timer",onclick:()=>{e?(t.push({title:e}),e=""):n="enter title!"}}))},s({style:"display: flex; height: 300px; flex-flow: column wrap; "},Object(i.i)({data:t,component:e=>s({},d(e),l({innerText:"delete",onclick:()=>{t.splice(t.indexOf(e.__context),1)}}))}))]},c({options:[{text:"abc",value:"1"},{text:"qwer",value:"2"}],value:"1",onchange:()=>{}}),Object(i.i)({data:u.listData,component:t=>[s({},[a({innerText:"online",style:"color: green"}),l({innerText:()=>`meet ${t.id}`,onclick:()=>{t.meeted=!0}}),Object(i.j)({active:()=>t.meeted,component:()=>s({style:"border: solid 1px red",innerText:()=>`Hey! I'm a model ${t.id}`})})]),Object(i.j)({active:()=>!t.meeted,component:()=>s({innerText:"meet me!"})})]}),l({innerText:"magic!",onclick:()=>{if(Math.random()>.5){let t=Math.round(Math.random()*u.listData.length);u.listData.splice(t,1)}else u.listData.splice(Math.round(Math.random()*u.listData.length),0,{id:Math.round(50*Math.random()),meeted:!1})}})),console.log(Date.now()-m)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,