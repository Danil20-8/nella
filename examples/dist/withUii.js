!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=8)}({8:function(e,t,n){"use strict";function r(e){switch(e.__propName){case"splice":case"shift":case"pop":case"push":case"unshift":case"sort":return function(...t){return n=e.__sourceContainer.source[e.__propName](...t.map(e=>e.valueOf())),r=()=>{e.__sourceProperty.__reload(),Object.values(e.__sourceProperty.__properties).forEach(e=>e.__reload())},n instanceof Promise?n.then(e=>(r(),e)):(r(),n);var n,r};case"slice":return function(t,n){n=void 0===n?e.__sourceContainer.source.length-1:Math.min(e.__sourceContainer.source.length-1,n);let r=[];for(let o=t;o<n;++o)r.push(e.__sourceProperty.__proxy[o]);return r};case"forEach":case"map":return function(t){return e.__sourceContainer.source[e.__propName]((n,r,o)=>{let i=e.__sourceProperty.__proxy[r];return t(i,r,o)})};case"concat":return function(...t){let n=[];return e.__sourceProperty.__proxy.forEach(e=>{n.push(e)}),t.forEach(e=>{Array.isArray(e)?e.forEach(e=>n.push(e)):n.push(e)}),n};case"flat":return function(t){t||(t=1);let n=[];return e.__sourceProperty.__proxy.forEach(e=>{Array.isArray&&t-1>-1?e.flat(t-1).forEach(e=>n.push(e)):n.push(e)}),n};case"filter":return function(t){let n=[];return e.__sourceProperty.__proxy.forEach(e=>{t(e)&&n.push(e)}),n};case"reverse":return function(){let t=[];return e.__sourceProperty.__proxy.forEach(e=>{predicate(e)&&t.unshift(e)}),t};default:return function(...t){return e.__sourceContainer.source[e.__propName].call(Array.isArray(e.__sourceContainer.source)?e.__sourceContainer.source:e.__sourceProperty.__proxy,...t.map(e=>e.valueOf()))}}}n.r(t);class o{constructor(e){return new Proxy(Object.assign(r(e),{toString:function(){return this.valueOf().toString()},valueOf:function(){e.__store.__track.length>0&&e.__store.__track.forEach(t=>e.__addTarget(t));let t=void 0===e.__propName?e.__sourceContainer.source:e.__sourceContainer.source[e.__propName];return void 0===t?t:t.valueOf()}}),new s(e))}}class i{constructor(e,t,n,r){this.__store=e,this.__sourceContainer={source:t},this.__sourceProperty=r,this.__properties={},this.__propName=n,this.__targets=[],this.__loaded=!1,this.__proxy=new o(this)}__addTarget({target:e,action:t}){e.properties.push(this),this.__targets.push(t)}__reload(){this.__loaded||(this.__store.__load(this),this.__loaded=!0)}__shot(){this.__loaded=!1}__removeTarget(e){this.__targets.splice(this.__targets.indexOf(e),1)}__setStore(e){this.__sourceContainer.source=e,Object.values(this.__properties).forEach(t=>{t.__setStore(e[this.__propName])}),this.__reload()}__setValue(e){this.__sourceContainer.source[this.__propName]=e,Object.values(this.__properties).forEach(t=>{t.__setStore(e)}),this.__reload()}}class s{constructor(e){this.__target=e}get(e,t){try{if(t===Symbol.toPrimitive)return this.__target.__sourceContainer.source[this.__target.__propName][t];let n=this.__target.__properties[t];if(void 0===n){let e=void 0!==this.__target.__propName?this.__target.__sourceContainer.source[this.__target.__propName]:this.__target.__sourceContainer.source;this.__target.__properties[t]=n=new i(this.__target.__store,e,t,this.__target)}else if(n instanceof Function)return e[t];return this.__target.__store.__track.length>0&&this.__target.__store.__track.forEach(e=>n.__addTarget(e)),n.__proxy}catch(e){throw e.propertyStack||(e={error:e,toString:function(){return this.error+"\nstore."+this.propertyStack.map(e=>e.__propName).reverse().join(".")},propertyStack:[]}),e.propertyStack.push(this.__target),e}}set(e,t,n){let r=this.__target.__properties[t];return void 0!==r?r.__setValue(n.valueOf()):(this.__target.__propName?this.__target.__sourceContainer.source[this.__target.__propName]:this.__target.__sourceContainer.source)[t]=n.valueOf(),Array.isArray(this.__target.__sourceContainer.source[this.__target.__propName])&&this.__target.__reload(),!0}}new s;class a{constructor(e,t){this.store=e,this.actions=t.map(e=>({tracked:!1,action:e})),this.properties=[]}track(){this.actions.forEach(e=>{e.tracked?e.action():(this.store.track(this,e.action),e.tracked=!0)})}untrack(){this.actions.forEach(e=>{e.tracked&&(this.properties.forEach(t=>t.__removeTarget(e.action)),e.tracked=!1)}),this.properties.splice(0,this.properties.length)}}let c=0;const l=new class{constructor(){this.__track=[],this.__loaded=[]}__startTrack(e){this.__track.push(e)}__stopTrack(e){this.__track.splice(this.__track.indexOf(e),1)}__load(e){this.__loaded.push(e)}track(e,t){t.__storeKey||(t.__storeKey=++c);let n={target:e,action:t};this.__startTrack(n),t(),this.__stopTrack(n)}shot(){let e=Date.now(),t={};try{this.__loaded.forEach(e=>{e.__targets.forEach(e=>{t[e.__storeKey]||(e(),t[e.__storeKey]=!0)}),e.__shot()})}catch(e){e.propertyStack?console.error(e.error,e.propertyStack):console.error(e)}this.__loaded.splice(0,this.__loaded.length),console.log("update time",Date.now()-e)}};function _(e){if(e){if(e instanceof HTMLElement)return e;if(Array.isArray(e.element)){for(let t=0;t<e.element.length;++t){let n=_(e.element[t]);if(n)return n}return null}return _(e.element)}return null}function u(e){return e?e instanceof HTMLElement?e:Array.isArray(e.element)?u(e.__parent):u(e.element):null}function h(e,t){if(e){if(!t&&e instanceof HTMLElement)return e;{let n=t?e.__nextSibling:e;for(;n;){let e=_(n);if(e)return e;n=n.__nextSibling}let r=e.__parent;for(;r&&Array.isArray(r.element);){let e=h(r.__nextSibling);if(e)return e;r=r.__parent}}}return null}function p(e,...t){t.forEach(t=>{t instanceof HTMLElement?u(e).append(t):Array.isArray(t.element)?t.element.forEach(t=>p(e,t)):t.element&&p(e,t.element)})}function f(e,t,n){t instanceof HTMLElement?u(e).insertBefore(t,h(n)):Array.isArray(t.element)?t.element.forEach(t=>f(e,t,n)):f(e,t.element,n)}function d(e){return e instanceof Function?e():e}function m(e){e.remove instanceof Function?e.remove():Array.isArray(e)?e.forEach(e=>m(e)):e.element&&m(e.element)}function y(e){Object.keys(e).forEach(t=>{if(t.startsWith("on")){let n=e[t];e[t]=async(...e)=>{let t=n(...e);for(;t instanceof Promise;)t=await t;return l.shot(),t}}})}class g{constructor(e,t,n){this.context=t,this.awake(),this.children=n||this.component(t),Array.isArray(this.children)||(this.children=[this.children]);for(let e=0;e<this.children.length;++e){let n=this.children[e];Array.isArray(n)?(this.children.splice(e,1,...n),--e):n instanceof Function?(n=n(t),n?this.children[e]=new g(null,t,n):(this.children.splice(e,1),--e)):n instanceof g||(this.children.splice(e,1),--e)}if(e){e instanceof HTMLElement?(this.element=e,p(this.element,...this.children)):(this.element=document.createElement(e),p(this.element,...this.children));let t=[],n=Object.keys(this.context);for(let e=0;e<n.length;++e){let r=n[e];r.startsWith("on")?this.element[r]=this.context[r]:r.startsWith("_")||void 0!==this.element[r]&&(this.context[r].valueOf()instanceof Function?t.push(()=>this.element[r]=this.context[r]().valueOf()):t.push(()=>this.element[r]=this.context[r].valueOf()))}this.__store=new a(l,t),this.__applyHtmlContext()}else this.element=this.children;for(let e=0;e<this.children.length;++e){let t=this.children[e];t instanceof g&&(t.__parent=this,t.__nextSibling=this.children[e+1])}}component(e){return[]}__reset(){this.children.forEach(e=>e.__reset()),Array.isArray(this.element)&&this.element.forEach(e=>e.__reset()),this.element instanceof g&&this.element.__reset(),this.__started=!1,this.awake(),this.__applyHtmlContext()}awake(){}__start(){return this.__started=!0,this.start()}start(){}__stop(){this.children.forEach(e=>e.__stop()),Array.isArray(this.element)&&this.element.forEach(e=>e.__stop()),this.stop(),this.__started=!1,this.element instanceof HTMLElement&&this.__store.untrack()}stop(){}async update(){this.__started||await this.__start();try{this.__applyHtmlContext(),this.children.forEach(e=>function(e,t){e.update instanceof Function?e.update(t):e.element&&e.element.update instanceof Function&&e.element.update(t)}(e))}catch(e){throw e.componentStack||(e.componentStack=[]),e.componentStack.push(this),e}}__applyHtmlContext(){this.element instanceof HTMLElement&&this.__store.track()}remove(){this.__started&&this.__stop(),m(this.element)}}function v(e,t,...n){return new g(e,t,n)}class x{constructor(e){return this.valueContainer=e,new Proxy(Object.assign(e,{toString:function(){return e.value.toString()},valueOf:function(){return e.value.valueOf()}}),this)}get(e,t){switch(t){case"valueOf":case"toString":return e[t]}return this.valueContainer.value[t]}}class k{constructor(e){this.__pool=[],this.__component=e}push(e){e.__pool&&this.__pool.push(e)}pop(e){let t=this.__pool.pop();if(t)return t.__pool.valueContainer.value=e,t.__reset(),t;{let n={value:e},r={valueContainer:n,proxy:new x(n)};return t=new g(null,r,this.__component(r.proxy)),t.__pool=r,t.__remove=t.remove,t.remove=()=>{t.__remove(),this.push(t)},t}}}function O(e,...t){return y(e),v("div",e,...t)}function b(e,t){return y(e),v("input",Object.assign(e,{type:t}))}function E(e){return y(e),b(e,"text")}function w(e){return y(e),v("button",e)}function A(...e){return function(...e){return C({data:()=>e.filter(e=>d(e.active.valueOf())).slice(0,1),component:e=>e.component()})}(...e.map(e=>({active:e.active,component:P(e.component)})))}let T=0;class S extends g{constructor(e){let t=[];super(null,e,t),e.component||(e.component=e.createElement),this.oldData=[],this.elements=t,this.dict={},this.__store=new a(l,[()=>this.__updateList(e.data.valueOf()instanceof Function?e.data().valueOf():e.data.valueOf())]),this.__store.track()}__insertAt(e,t){this.__started&&(e<this.elements.length?f(this.__parent,t,this.elements[e]):f(this.__parent,t,h(this,!0)))}update(){this.__store.track(),super.update()}__updateList(e){let t={},n={};for(let r=0;r<e.length;++r){let o=e[r],i=this.oldData[r],s=o instanceof Object;if(s&&o==i)continue;let a=s?o.__key||(o.__key=++T):o,c=this.dict[a];if(c){if(!s){let e=n[a];if(e&&e.length>=c.length){let e=new g(null,o,this.context.component(o));c.__parent=this,c.push(e),c=e;let t=n[a];t?t.push(c):n[a]=[c]}else{let e=c.shift();c.push(e),c=e;let t=n[a];if(t?t.push(c):n[a]=[c],o==i)continue}}let e=t[a];e&&(s?delete t[a]:e.splice(e.indexOf(c),1)),s&&(n[a]=c)}else if(c=new g(null,o,this.context.component(o)),c.__parent=this,s)this.dict[a]=c;else{let e=this.dict[a];e?e.push(c):this.dict[a]=[c];let t=n[a];t?t.push(c):n[a]=[c]}let l=this.elements[r],_=r+1;for(;_<this.elements.length;++_){let e=this.oldData[_];if(s){if(n[e.__key])continue;break}{let t=n[e];if(t){let e=this.elements[_];if(t.indexOf(e)>-1)continue}break}}if(this.__insertAt(_,c),_-1>0&&(this.elements[_-2].__nextSibling=c),l)if(s)n[i.__key]||(t[i.__key]=l);else{let e=n[i];if(!e||e.indexOf(l)<0){let e=t[i];e?e.push(l):t[i]=[l]}}this.elements[r]=c,this.oldData[r]=o}if(Object.keys(t).forEach(e=>{let n=t[e],r=this.dict[e];Array.isArray(n)?(n.forEach(e=>{m(e),r.splice(r.indexOf(e),1)}),0===r.length&&delete this.dict[e]):(m(n),delete this.dict[e])}),this.oldData.length>e.length){for(let t=e.length;t<this.oldData.length;++t){let e=this.elements[t],r=this.oldData[t],o=r instanceof Object,i=o?r.__key:r;if(!o||!n[r.__key]){{let t=n[r];if(t&&t.indexOf(e)>-1)continue}if(o)delete this.dict[i];else{let t=this.dict[i];t.splice(t.indexOf(e),1),0===t.length&&delete this.dict[i]}m(e)}}this.elements.splice(e.length,this.elements.length),this.oldData.splice(e.length,this.oldData.length),this.elements.length>0&&(this.elements[this.elements.length-1].__nextSibling=null)}}}function C(e){return new S(e)}function j(e){let t=new k(e.component);return C({data:e.data,component:e=>t.pop(e)})}function P(e){let t=new k(e);return()=>t.pop()}function H(e){return new i(l,e).__proxy}function N(){l.shot()}let M={},D=null,L=function(){};function F(e){if(null===e)return e;let t=e.valueOf();if(Array.isArray(t))return[...t];if(t instanceof Object){let n={};return Object.keys(t).forEach(t=>{let r=e[t];r.valueOf()instanceof Function||(n[t]=F(r))}),n}return t}window.addEventListener("popstate",(function(e){if(D&&D.onexit)return D.onexit(),D=null,q(null,null,{onenter:()=>{this.history.back()}}),void this.history.back();null!==e.state&&e.state.key&&(D=M[e.state.key],D)?D.onenter&&(D.onenter(e.state.enterState),N()):(L(e.state),N())}));let K=0;function q(e,t,n){n.__routerKey||(n.__routerKey=(++K).toString()),M[n.__routerKey]=D=n,history.pushState({key:n.__routerKey,enterState:F(e)},"router",t)}class W extends g{constructor(e){super(null,e)}awake(){q(null,null,{onexit:()=>this.context.hide()})}component(){return O({style:"position: absolute; left: 33%; right: 33%; top: 25%; bottom: 50%; border: solid 2px green; color green; display: flex; justify-content: center; flex-flow: column;"},O({innerText:"popup",style:"text-align: center"}),w({innerText:"close",onclick:this.context.hide}))}}L=()=>{B.pathname=location.pathname};let G=H({name:"rename me",langs:["en","ru"]}),V=H({queue:[],pushPopup:function(e){this.queue.push(e)},closePopup:function(){this.queue.shift()}}),B=H({pathname:location.pathname,gotoHome:function(){this.goto("/")},gotoContent:function(){this.goto("/content")},goto:function(e){this.pathname=e,q(this,this.pathname,{onenter:e=>{!function e(t,n){null!==n&&Object.keys(n).forEach(r=>{let o=n[r];if(Array.isArray(o)){let e=t[r];e.valueOf()?t[r].splice(0,e.valueOf().length,...o):t[r]=o}else if(o instanceof Object){t[r].valueOf()?e(t[r],o):t[r]=o}else t[r]=o})}(this,e)}})}});!function(e,...t){let n=new g(e,{},t);n.update()}(document.body,function({active:e,hide:t}){return A({active:e,component:()=>new W({active:e,hide:t})})}({active:()=>V.queue.length>0,hide:V.closePopup}),w({innerText:"boo!",onclick:()=>V.pushPopup({})}),O({innerText:G.name}),O({},()=>{let e=H({value:""});return[E({value:e.value,onchange:t=>{e.value=t.target.value}}),w({innerText:"save",onclick:()=>{G.name=e.value,e.value=""}})]}),O({},()=>{let e=H({value:""});return[E({placeholder:"lang",value:e.value,onchange:t=>e.value=t.target.value}),w({innerText:"Add",onclick:()=>{G.langs.push(e.value),e.value=""}})]}),O({},O({style:"color: green",innerText:G.langs.length}),j({data:G.langs,component:e=>[O({innerText:e}),w({innerText:"remove",onclick:()=>G.langs.splice(G.langs.indexOf(e),1)})]})),O({},A({active:()=>"/"===B.pathname.valueOf(),component:()=>[O({innerText:"Home"}),O({innerText:"Hello everybody! Glad to see you at my home! Please go to see my content!"}),w({innerText:"to content!",onclick:B.gotoContent})]},{active:()=>B.pathname.startsWith("/content"),component:()=>[O({innerText:"Content"}),O({innerText:"Hey! Here is my content! Enjoy to see that!"}),O({innerText:"Tired of content? Go home and get rest."}),w({innerText:"to home",onclick:B.gotoHome})]})))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,